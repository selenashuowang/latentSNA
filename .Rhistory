N<-10
## number of brain regions
V<-5
## number of behavior variables
P<-1
W<-NULL
H<-NULL
a_t<-matrix(0, nrow = N, ncol = 1)
D=1
## start to create covariance matrix
S <- diag(1,V+D)
n_signa=V
id_siga=c(6,3,12,17)
for (each in id_siga){
S[each,id_siga[!id_siga %in% each]]=.9
}
#### generate data sample size
N<-10
## number of brain regions
V<-50
## number of behavior variables
P<-1
W<-NULL
H<-NULL
a_t<-matrix(0, nrow = N, ncol = 1)
D=1
## start to create covariance matrix
S <- diag(1,V+D)
n_signa=V
id_siga=c(6,3,12,17)
for (each in id_siga){
S[each,id_siga[!id_siga %in% each]]=.9
}
S[(V+1),id_siga]=.9
S[id_siga,(V+1)]=.9
Su = matrix(S[1:V,1:V], nrow=V, ncol=V)
Stheta = matrix(S[(V+1):(V+D),(V+1):(V+D) ], nrow=D, ncol=D)
Sutheta =matrix(S[(V+1):(V+D),1:V], nrow = D, ncol = V)
S
Su = matrix(S[1:V,1:V], nrow=V, ncol=V)
Stheta = matrix(S[(V+1):(V+D),(V+1):(V+D) ], nrow=D, ncol=D)
Sutheta =matrix(S[(V+1):(V+D),1:V], nrow = D, ncol = V)
UTheta <- mvrnorm(n = N, mu=rep(0,(V+D)), Sigma=S, empirical = FALSE)
U.array=array(NA, dim = c(V,1,N))
U.array[,1,]=t(UTheta[,1:(V)])
Theta_t <- data.matrix(UTheta[,(V+1):(V+D)])
beta_t=NULL
gamma_t=NULL
#connectivity variance
#attribute variance
s1_t=1
s2_t=1
Alpha_t=matrix(1, nrow=1, ncol=1)
b_t=matrix(0, nrow = P, ncol = 1)
X<-list()
for(i in 1:N){
errormatrix=matrix(0, nrow = V, ncol = V)
errormatrix[upper.tri(errormatrix,diag = FALSE)]=rnorm(V*(V-1)/2, sd=sqrt(s2_t))
errormatrix=t(errormatrix)+errormatrix
diag(errormatrix)=rnorm(V, sd=sqrt(s2_t))
X[[i]]<-as.numeric(a_t[i,])  + U.array[,,i]%*% t(U.array[,,i]) +errormatrix
diag(X[[i]])=NA
}
Y= matrix(rep(1,N)) %*% t(b_t)+ Theta_t%*%t(Alpha_t)+matrix(rnorm(N*P, sd=sqrt(s1_t)),N,P)
### data stopped here
setwd("/Users/selena/Desktop/github/LatentSNA/data")
saveRDS(X, "X.RData")
saveRDS(Y, "Y.RData")
setwd("/Users/selena/Desktop/github/LatentSNA/data")
load(file='X.rda')
load(file='Y.rda')
model1=latentSNA(X, Y,W=NULL, H=NULL,
seed = 1, nscan = 1000, burn = 100, odens = 1,
prior=list())
model1$COV[,1:10]
X[[1]]
Y
#### generate data sample size
N<-50
## number of brain regions
V<-50
## number of behavior variables
P<-1
W<-NULL
H<-NULL
a_t<-matrix(0, nrow = N, ncol = 1)
D=1
## start to create covariance matrix
S <- diag(1,V+D)
n_signa=V
id_siga=c(6,3,12,17)
for (each in id_siga){
S[each,id_siga[!id_siga %in% each]]=.9
}
S[(V+1),id_siga]=.9
S[id_siga,(V+1)]=.9
Su = matrix(S[1:V,1:V], nrow=V, ncol=V)
Stheta = matrix(S[(V+1):(V+D),(V+1):(V+D) ], nrow=D, ncol=D)
Sutheta =matrix(S[(V+1):(V+D),1:V], nrow = D, ncol = V)
UTheta <- mvrnorm(n = N, mu=rep(0,(V+D)), Sigma=S, empirical = FALSE)
U.array=array(NA, dim = c(V,1,N))
U.array[,1,]=t(UTheta[,1:(V)])
Theta_t <- data.matrix(UTheta[,(V+1):(V+D)])
## covariate coefficients
beta_t=NULL
gamma_t=NULL
#connectivity variance
#attribute variance
s1_t=2
s2_t=2
Alpha_t=matrix(1, nrow=1, ncol=1)
b_t=matrix(0, nrow = P, ncol = 1)
X<-list()
for(i in 1:N){
errormatrix=matrix(0, nrow = V, ncol = V)
errormatrix[upper.tri(errormatrix,diag = FALSE)]=rnorm(V*(V-1)/2, sd=sqrt(s2_t))
errormatrix=t(errormatrix)+errormatrix
diag(errormatrix)=rnorm(V, sd=sqrt(s2_t))
X[[i]]<-as.numeric(a_t[i,])  + U.array[,,i]%*% t(U.array[,,i]) +errormatrix
diag(X[[i]])=NA
}
Y= matrix(rep(1,N)) %*% t(b_t)+ Theta_t%*%t(Alpha_t)+matrix(rnorm(N*P, sd=sqrt(s1_t)),N,P)
### data stopped here
setwd("/Users/selena/Desktop/github/LatentSNA/data")
saveRDS(X, "X.RData")
saveRDS(Y, "Y.RData")
setwd("/Users/selena/Desktop/github/LatentSNA/data")
load(file='X.rda')
load(file='Y.rda')
model1=latentSNA(X, Y,W=NULL, H=NULL,
seed = 1, nscan = 1000, burn = 100, odens = 1,
prior=list())
model1$COV[,1:10]
setwd("/Users/selena/Desktop/github/LatentSNA/data")
load(file='X.rda')
load(file='Y.rda')
model1=latentSNA(X, Y,W=NULL, H=NULL,
seed = 1, nscan = 100, burn = 10, odens = 1,
prior=list())
model1$COV[,1:10]
model1$bPM
model1$COV
#### generate data sample size
N<-10
## number of brain regions
V<-50
## number of behavior variables
P<-1
W<-NULL
H<-NULL
a_t<-matrix(0, nrow = N, ncol = 1)
D=1
## start to create covariance matrix
S <- diag(1,V+D)
n_signa=V
id_siga=c(6,3,12,17)
for (each in id_siga){
S[each,id_siga[!id_siga %in% each]]=.9
}
S[(V+1),id_siga]=.9
S[id_siga,(V+1)]=.9
Su = matrix(S[1:V,1:V], nrow=V, ncol=V)
Stheta = matrix(S[(V+1):(V+D),(V+1):(V+D) ], nrow=D, ncol=D)
Sutheta =matrix(S[(V+1):(V+D),1:V], nrow = D, ncol = V)
UTheta <- mvrnorm(n = N, mu=rep(0,(V+D)), Sigma=S, empirical = FALSE)
U.array=array(NA, dim = c(V,1,N))
U.array[,1,]=t(UTheta[,1:(V)])
Theta_t <- data.matrix(UTheta[,(V+1):(V+D)])
## covariate coefficients
beta_t=NULL
gamma_t=NULL
#connectivity variance
#attribute variance
s1_t=2
s2_t=2
Alpha_t=matrix(1, nrow=1, ncol=1)
b_t=matrix(0, nrow = P, ncol = 1)
X<-list()
for(i in 1:N){
errormatrix=matrix(0, nrow = V, ncol = V)
errormatrix[upper.tri(errormatrix,diag = FALSE)]=rnorm(V*(V-1)/2, sd=sqrt(s2_t))
errormatrix=t(errormatrix)+errormatrix
diag(errormatrix)=rnorm(V, sd=sqrt(s2_t))
X[[i]]<-as.numeric(a_t[i,])  + U.array[,,i]%*% t(U.array[,,i]) +errormatrix
diag(X[[i]])=NA
}
Y= matrix(rep(1,N)) %*% t(b_t)+ Theta_t%*%t(Alpha_t)+matrix(rnorm(N*P, sd=sqrt(s1_t)),N,P)
### data stopped here
setwd("/Users/selena/Desktop/github/LatentSNA/data")
saveRDS(X, "X.RData")
saveRDS(Y, "Y.RData")
model1$U
setwd("/Users/selena/Desktop/github/LatentSNA/data")
load(file='X.rda')
load(file='Y.rda')
model1=latentSNA(X, Y,W=NULL, H=NULL,
seed = 1, nscan = 100, burn = 0, odens = 1,
prior=list())
model1$COV
X[[1]]
model1$UPM
cov(model1$UPM)
library(psych)
plot(cov(model1$UPM))
library(psych)
cor.plot(cov(model1$UPM))
use_data(X)
use_data(X,overwrite = TRUE)
use_data(Y,overwrite = TRUE)
setwd("/Users/selena/Desktop/github/LatentSNA/data")
load(file='X.rda')
load(file='Y.rda')
model1=latentSNA(X, Y,W=NULL, H=NULL,
seed = 1, nscan = 100, burn = 0, odens = 1,
prior=list())
model1$COV
devtools::document()
build_manual()
X[[1]]
setwd("/Users/selena/Desktop/github/LatentSNA/data")
load(file='X.rda')
load(file='Y.rda')
model1=latentSNA(X, Y,W=NULL, H=NULL,
seed = 1, nscan = 100, burn = 10, odens = 1,
prior=list())
setwd("/Users/selena/Desktop/github/LatentSNA/data")
load(file='X.rda')
load(file='Y.rda')
model1=latentSNA(X, Y,W=NULL, H=NULL,
seed = 1, nscan = 100, burn = 10, odens = 1,
prior=list())
model1$COV
S
errormatrix
#### generate data sample size
N<-10
## number of brain regions
V<-50
## number of behavior variables
P<-1
W<-NULL
H<-NULL
a_t<-matrix(0, nrow = N, ncol = 1)
D=1
## start to create covariance matrix
S <- diag(1,V+D)
n_signa=V
id_siga=c(6,3,12,17)
for (each in id_siga){
S[each,id_siga[!id_siga %in% each]]=.9
}
S[(V+1),id_siga]=.9
S[id_siga,(V+1)]=.9
Su = matrix(S[1:V,1:V], nrow=V, ncol=V)
Stheta = matrix(S[(V+1):(V+D),(V+1):(V+D) ], nrow=D, ncol=D)
Sutheta =matrix(S[(V+1):(V+D),1:V], nrow = D, ncol = V)
UTheta <- mvrnorm(n = N, mu=rep(0,(V+D)), Sigma=S, empirical = FALSE)
U.array=array(NA, dim = c(V,1,N))
U.array[,1,]=t(UTheta[,1:(V)])
Theta_t <- data.matrix(UTheta[,(V+1):(V+D)])
## covariate coefficients
beta_t=NULL
gamma_t=NULL
#connectivity variance
#attribute variance
s1_t=6
s2_t=6
Alpha_t=matrix(1, nrow=1, ncol=1)
b_t=matrix(0, nrow = P, ncol = 1)
X<-list()
for(i in 1:N){
errormatrix=matrix(0, nrow = V, ncol = V)
errormatrix[upper.tri(errormatrix,diag = FALSE)]=rnorm(V*(V-1)/2, sd=sqrt(s2_t))
errormatrix=t(errormatrix)+errormatrix
diag(errormatrix)=rnorm(V, sd=sqrt(s2_t))
X[[i]]<-as.numeric(a_t[i,])  + U.array[,,i]%*% t(U.array[,,i]) +errormatrix
diag(X[[i]])=NA
}
Y= matrix(rep(1,N)) %*% t(b_t)+ Theta_t%*%t(Alpha_t)+matrix(rnorm(N*P, sd=sqrt(s1_t)),N,P)
setwd("/Users/selena/Desktop/github/LatentSNA")
use_data(X,overwrite = TRUE)
use_data(Y,overwrite = TRUE)
devtools::document()
build_manual()
setwd("/Users/selena/Desktop/github/LatentSNA/data")
load(file='X.rda')
load(file='Y.rda')
model1=latentSNA(X, Y,W=NULL, H=NULL,
seed = 1, nscan = 100, burn = 10, odens = 1,
prior=list())
model1$COV
setwd("/Users/selena/Desktop/github/LatentSNA/data")
load(file='X.rda')
load(file='Y.rda')
model1=latentSNA(X, Y,W=NULL, H=NULL,
seed = 1, nscan = 100, burn = 1, odens = 1,
prior=list())
model1$COV
#### generate data sample size
N<-100
## number of brain regions
V<-50
## number of behavior variables
P<-1
W<-NULL
H<-NULL
a_t<-matrix(0, nrow = N, ncol = 1)
D=1
## start to create covariance matrix
S <- diag(1,V+D)
n_signa=V
id_siga=c(6,3,12,17)
for (each in id_siga){
S[each,id_siga[!id_siga %in% each]]=.9
}
S[(V+1),id_siga]=.9
S[id_siga,(V+1)]=.9
Su = matrix(S[1:V,1:V], nrow=V, ncol=V)
Stheta = matrix(S[(V+1):(V+D),(V+1):(V+D) ], nrow=D, ncol=D)
Sutheta =matrix(S[(V+1):(V+D),1:V], nrow = D, ncol = V)
UTheta <- mvrnorm(n = N, mu=rep(0,(V+D)), Sigma=S, empirical = FALSE)
U.array=array(NA, dim = c(V,1,N))
U.array[,1,]=t(UTheta[,1:(V)])
Theta_t <- data.matrix(UTheta[,(V+1):(V+D)])
## covariate coefficients
beta_t=NULL
gamma_t=NULL
#connectivity variance
#attribute variance
s1_t=6
s2_t=6
Alpha_t=matrix(1, nrow=1, ncol=1)
b_t=matrix(0, nrow = P, ncol = 1)
X<-list()
for(i in 1:N){
errormatrix=matrix(0, nrow = V, ncol = V)
errormatrix[upper.tri(errormatrix,diag = FALSE)]=rnorm(V*(V-1)/2, sd=sqrt(s2_t))
errormatrix=t(errormatrix)+errormatrix
diag(errormatrix)=rnorm(V, sd=sqrt(s2_t))
X[[i]]<-as.numeric(a_t[i,])  + U.array[,,i]%*% t(U.array[,,i]) +errormatrix
diag(X[[i]])=NA
}
Y= matrix(rep(1,N)) %*% t(b_t)+ Theta_t%*%t(Alpha_t)+matrix(rnorm(N*P, sd=sqrt(s1_t)),N,P)
length(X)
setwd("/Users/selena/Desktop/github/LatentSNA")
use_data(X,overwrite = TRUE)
use_data(Y,overwrite = TRUE)
devtools::document()
build_manual()
setwd("/Users/selena/Desktop/github/LatentSNA/data")
load(file='X.rda')
load(file='Y.rda')
model1=latentSNA(X, Y,W=NULL, H=NULL,
seed = 1, nscan = 100, burn = 1, odens = 1,
prior=list())
model1$COV
#### generate data sample size
N<-10
## number of brain regions
V<-50
## number of behavior variables
P<-1
W<-NULL
H<-NULL
a_t<-matrix(0, nrow = N, ncol = 1)
D=1
## start to create covariance matrix
S <- diag(1,V+D)
n_signa=V
id_siga=c(6,3,12,17)
for (each in id_siga){
S[each,id_siga[!id_siga %in% each]]=.9
}
S[(V+1),id_siga]=.9
S[id_siga,(V+1)]=.9
Su = matrix(S[1:V,1:V], nrow=V, ncol=V)
Stheta = matrix(S[(V+1):(V+D),(V+1):(V+D) ], nrow=D, ncol=D)
Sutheta =matrix(S[(V+1):(V+D),1:V], nrow = D, ncol = V)
UTheta <- mvrnorm(n = N, mu=rep(0,(V+D)), Sigma=S, empirical = FALSE)
U.array=array(NA, dim = c(V,1,N))
U.array[,1,]=t(UTheta[,1:(V)])
Theta_t <- data.matrix(UTheta[,(V+1):(V+D)])
## covariate coefficients
beta_t=NULL
gamma_t=NULL
#connectivity variance
#attribute variance
s1_t=6
s2_t=6
Alpha_t=matrix(1, nrow=1, ncol=1)
b_t=matrix(0, nrow = P, ncol = 1)
X<-list()
for(i in 1:N){
errormatrix=matrix(0, nrow = V, ncol = V)
errormatrix[upper.tri(errormatrix,diag = FALSE)]=rnorm(V*(V-1)/2, sd=sqrt(s2_t))
errormatrix=t(errormatrix)+errormatrix
diag(errormatrix)=rnorm(V, sd=sqrt(s2_t))
X[[i]]<-as.numeric(a_t[i,])  + U.array[,,i]%*% t(U.array[,,i]) +errormatrix
diag(X[[i]])=NA
}
Y= matrix(rep(1,N)) %*% t(b_t)+ Theta_t%*%t(Alpha_t)+matrix(rnorm(N*P, sd=sqrt(s1_t)),N,P)
### data stopped here
setwd("/Users/selena/Desktop/github/LatentSNA")
use_data(X,overwrite = TRUE)
use_data(Y,overwrite = TRUE)
devtools::document()
build_manual()
#### generate data sample size
N<-10
## number of brain regions
V<-50
## number of behavior variables
P<-1
W<-NULL
H<-NULL
a_t<-matrix(0, nrow = N, ncol = 1)
D=1
## start to create covariance matrix
S <- diag(1,V+D)
n_signa=V
id_siga=c(6,3,12,17)
for (each in id_siga){
S[each,id_siga[!id_siga %in% each]]=.9
}
S[(V+1),id_siga]=.9
S[id_siga,(V+1)]=.9
Su = matrix(S[1:V,1:V], nrow=V, ncol=V)
Stheta = matrix(S[(V+1):(V+D),(V+1):(V+D) ], nrow=D, ncol=D)
Sutheta =matrix(S[(V+1):(V+D),1:V], nrow = D, ncol = V)
UTheta <- mvrnorm(n = N, mu=rep(0,(V+D)), Sigma=S, empirical = FALSE)
U.array=array(NA, dim = c(V,1,N))
U.array[,1,]=t(UTheta[,1:(V)])
Theta_t <- data.matrix(UTheta[,(V+1):(V+D)])
## covariate coefficients
beta_t=NULL
gamma_t=NULL
#connectivity variance
#attribute variance
s1_t=6
s2_t=6
Alpha_t=matrix(1, nrow=1, ncol=1)
b_t=matrix(0, nrow = P, ncol = 1)
X<-list()
for(i in 1:N){
errormatrix=matrix(0, nrow = V, ncol = V)
errormatrix[upper.tri(errormatrix,diag = FALSE)]=rnorm(V*(V-1)/2, sd=sqrt(s2_t))
errormatrix=t(errormatrix)+errormatrix
diag(errormatrix)=rnorm(V, sd=sqrt(s2_t))
X[[i]]<-as.numeric(a_t[i,])  + U.array[,,i]%*% t(U.array[,,i]) +errormatrix
diag(X[[i]])=NA
}
Y= matrix(rep(1,N)) %*% t(b_t)+ Theta_t%*%t(Alpha_t)+matrix(rnorm(N*P, sd=sqrt(s1_t)),N,P)
### data stopped here
setwd("/Users/selena/Desktop/github/LatentSNA")
use_data(X,overwrite = TRUE)
use_data(Y,overwrite = TRUE)
devtools::document()
build_manual()
library(latentSNA)
devtools::install_github("selenashuowang/latentSNA", force = TRUE)
setwd("/Users/selena/Desktop/github/LatentSNA/data")
load(file='X.rda')
load(file='Y.rda')
model1=latentSNA(X, Y,W=NULL, H=NULL,
seed = 1, nscan = 10, burn = 1, odens = 1,
prior=list())
setwd("/Users/selena/Desktop/github/LatentSNA")
devtools::document()
setwd("/Users/selena/Desktop/github/LatentSNA")
devtools::document()
build_manual()
?sapply
?solve
setwd("/Users/selena/Desktop/github/LatentSNA")
devtools::document()
build_manual()
setwd("/Users/selena/Desktop/indiana/Writte_packages")
devtools::create("latentSNA")
devtools::document()
build_manual()
devtools::build( "/Users/selena/Desktop/indiana/Writte_packages/LatentSNA" )
devtools::document()
devtools::build( "/Users/selena/Desktop/indiana/Writte_packages/LatentSNA" )
devtools::document()
devtools::build( "/Users/selena/Desktop/indiana/Writte_packages/LatentSNA" )
devtools::document()
setwd("/Users/selena/Desktop/indiana/Writte_packages")
devtools::create("latentSNA")
devtools::build( "/Users/selena/Desktop/indiana/Writte_packages/LatentSNA" )
setwd("/Users/selena/Desktop/indiana/Writte_packages/LatentSNA")
devtools::document()
build_manual()
setwd("/Users/selena/Desktop/github")
devtools::create("latentSNA")
devtools::document()
setwd("/Users/selena/Desktop/github/LatentSNA")
devtools::document()
build_manual()
usethis::use_vignette("LatentSNA")
library(latentSNA)
library(latentSNA)
attach(X)
library(latentSNA)
setwd("/Users/selena/Desktop/github/LatentSNA/data")
load(file='X.rda')
load(file='Y.rda')
model1=latentSNA(X, Y,W=NULL, H=NULL,
seed = 1, nscan = 10, burn = 1, odens = 1,
prior=list())
usethis::use_vignette("LatentSNA")
devtools::document()
build_manual()
